import { Inject, Injectable, Optional, RendererFactory2 } from '@angular/core';
import { APP_BASE_HREF, PlatformLocation } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { map, finalize, share } from 'rxjs/operators';
import { InlineSVGConfig } from './inline-svg.config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./inline-svg.config";
import * as i3 from "@angular/common/http";
var SVGCacheService = (function () {
    function SVGCacheService(_appBase, _location, _config, _http, rendererFactory) {
        this._appBase = _appBase;
        this._location = _location;
        this._config = _config;
        this._http = _http;
        this._renderer = rendererFactory.createRenderer(null, null);
        this.setBaseUrl();
        if (!SVGCacheService._cache) {
            SVGCacheService._cache = new Map();
        }
        if (!SVGCacheService._inProgressReqs) {
            SVGCacheService._inProgressReqs = new Map();
        }
    }
    SVGCacheService.prototype.getSVG = function (url, cache) {
        var _this = this;
        if (cache === void 0) { cache = true; }
        var absUrl = this.getAbsoluteUrl(url);
        if (cache && SVGCacheService._cache.has(absUrl)) {
            return of(this._cloneSVG(SVGCacheService._cache.get(absUrl)));
        }
        if (SVGCacheService._inProgressReqs.has(absUrl)) {
            return SVGCacheService._inProgressReqs.get(absUrl);
        }
        var req = this._http.get(absUrl, { responseType: 'text' })
            .pipe(finalize(function () {
            SVGCacheService._inProgressReqs.delete(absUrl);
        }), share(), map(function (svgText) {
            var svgEl = _this._svgElementFromString(svgText);
            SVGCacheService._cache.set(absUrl, svgEl);
            return _this._cloneSVG(svgEl);
        }));
        SVGCacheService._inProgressReqs.set(absUrl, req);
        return req;
    };
    SVGCacheService.prototype.setBaseUrl = function () {
        if (this._config) {
            this._baseUrl = this._config.baseUrl;
        }
        else if (this._appBase !== null) {
            this._baseUrl = this._appBase;
        }
        else if (this._location !== null) {
            this._baseUrl = this._location.getBaseHrefFromDOM();
        }
    };
    SVGCacheService.prototype.getAbsoluteUrl = function (url) {
        if (this._baseUrl && !/^https?:\/\//i.test(url)) {
            url = this._baseUrl + url;
            if (url.indexOf('//') === 0) {
                url = url.substring(1);
            }
        }
        var base = this._renderer.createElement('BASE');
        base.href = url;
        return base.href;
    };
    SVGCacheService.prototype._svgElementFromString = function (str) {
        var div = this._renderer.createElement('DIV');
        div.innerHTML = str;
        var svg = div.querySelector('svg');
        if (!svg) {
            throw new Error('No SVG found in loaded contents');
        }
        return svg;
    };
    SVGCacheService.prototype._cloneSVG = function (svg) {
        return svg.cloneNode(true);
    };
    SVGCacheService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    SVGCacheService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] }] },
        { type: PlatformLocation, decorators: [{ type: Optional }] },
        { type: InlineSVGConfig, decorators: [{ type: Optional }] },
        { type: HttpClient },
        { type: RendererFactory2 }
    ]; };
    SVGCacheService.ngInjectableDef = i0.defineInjectable({ factory: function SVGCacheService_Factory() { return new SVGCacheService(i0.inject(i1.APP_BASE_HREF, 8), i0.inject(i1.PlatformLocation, 8), i0.inject(i2.InlineSVGConfig, 8), i0.inject(i3.HttpClient), i0.inject(i0.RendererFactory2)); }, token: SVGCacheService, providedIn: "root" });
    return SVGCacheService;
}());
export { SVGCacheService };
